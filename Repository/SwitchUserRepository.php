<?php

namespace Elpiafo\SwitchUserBundle\Repository;

/**
 * SwitchRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SwitchUserRepository extends \Doctrine\ORM\EntityRepository
{

    /*
     *
     */
    public function isAllowed($grantor, $granted)
    {
        $datetime = date('Y-m-d H:i:s');
        $params = array(
            'startDate'    => $datetime,
            'endDate'      => $datetime,
            'grantor'       => $grantor,
            'granted'       => $granted
        );
        $qb = $this->createQueryBuilder('s')
            ->addSelect('s')
            ->where('s.active = 1')
            ->andWhere('s.startDate <= :startDate OR s.startDate IS NULL')
            ->andWhere('s.endDate >= :endDate OR s.endDate IS NULL')
            ->andWhere('s.grantor = :grantor')
            ->andWhere('s.granted = :granted')
            ->setMaxResults(1)
            ->setParameters($params)
        ;
        return $qb->getQuery()->getResult();
    }

    public function getGrantedFromUser($grantor)
    {
        $qb = $this->createQueryBuilder('s')
            ->addSelect('s')
            ->andWhere('s.grantor = :grantor')
            ->setParameter('grantor', $grantor);
        return $qb->getQuery()->getResult();
    }

    public function getGrantorFromUser($granted)
    {
        $qb = $this->createQueryBuilder('s')
            ->addSelect('s')
            ->andWhere('s.granted = :granted')
            ->setParameter('granted', $granted);
        return $qb->getQuery()->getResult();
    }

    public function getAllAllowed()
    {
        $datetime = date('Y-m-d H:i:s');
        $params = array(
            'startDate'    => $datetime,
            'endDate'      => $datetime,
        );
        $qb = $this->createQueryBuilder('s')
            ->addSelect('s')
            ->where('s.active = 1')
            ->andWhere('s.startDate <= :startDate OR s.startDate IS NULL')
            ->andWhere('s.endDate >= :endDate OR s.endDate IS NULL')
            ->setParameters($params)
        ;
        return $qb->getQuery()->getResult();
    }
}
